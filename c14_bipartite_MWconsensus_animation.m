% Disclaimer: The animation in this mfile is generated by Google's AI Gemini
% MATLAB Multi-Agent Trajectory Animation and Video Export

clc; clear;
global L
n = 9; % Number of agents
m = 14; % Number of edges
d = 2; % Dimension of agent states (e.g., 2D for x,y coordinates)

% Define graph edges
s = [1 1 2 2 3 3 4 4 5 5 6 7 7 8];
t = [2 3 3 4 4 5 5 6 7 9 7 8 9 9];
G = graph(s,t); % Create graph object

% Incidence matrix and A matrices for the Laplacian
H = incidence(G)'*eye(n); % Adjusted to match the size of L
A12 = [1 sqrt(3)/2;
       sqrt(3)/2 1];
A13 = [0 0; 0 1];
A23 = [2 1;
       1 1];
A24 = A13;
A34 = A13;
A35 =-[1 0;
       0 0]; % negative edge
A45 = -diag([1, 2]); % negative edge
A78 = eye(2);
A79 = eye(2);
A89 = ones(2,2);
A46 = -A89; % negative edge
A67 = A12;
A57 = [1 0;0 0];
A59 = A13;

% Block diagonal matrix W (weights/coupling matrices for edges)
W = blkdiag(A12,A13,A23,A24,A34,A35,A45,A46,A57,A59,A67,A78,A79,A89);
Z = zeros(2,2); % Zero 2x2 matrix for convenience

% Construct the Laplacian matrix L
% This matrix defines the interaction topology and dynamics between agents
L = [A12+A13 -A12        -A13           Z                   Z        Z        Z            Z  Z;
     -A12    A12+A23+A24 -A23        -A24                   Z        Z        Z            Z  Z;
     -A13    -A23    A13+A23+A34-A35 -A34                -A35        Z        Z            Z  Z;
      Z      -A24        -A34        A24+A34-A45-A46     -A45     -A46        Z            Z  Z;
      Z      Z           -A35        -A45    -A35-A45+A57+A59        Z     -A57            Z  -A59;
      Z      Z           Z           -A46                   Z -A46+A67     -A67            Z  Z;
      Z      Z           Z           Z                   -A57     -A67  A57+A67+A78+A79 -A78  -A79;
      Z      Z           Z           Z                      Z        Z      -A78     A78+A89  -A89;
      Z      Z           Z           Z                   -A59        Z      -A79        -A89  A59+A79+A89];

% Initial condition for agents
rng(7); % Seed the random number generator for reproducibility
x0=[];
for i = 1:n
    r = 2*(rand(2,1)-0.5); % Random 2D vector
    x0 = [x0;r/norm(r)]; % Normalize to unit vector and stack
end

% Solve the ordinary differential equation (ODE) for agent trajectories
% @control_law is the function defining the dynamics
% [0:0.01:40] is the time span for simulation
% x0 is the initial state
[t_sim,x_sim] = ode45(@control_law,[0:0.1:40],x0);
t_end_idx = length(t_sim); % Index of the last time step

%% --- Animation and Video Export ---

% 1. Setup the Figure and Axes for animation
figure('Color', 'w'); % Create a figure with white background
hold on; % Keep plots on the same axes

% Pre-allocate plot handles for each agent's trajectory
% We plot empty lines initially (NaN, NaN) and update them in the loop
h_trajectories = gobjects(1, n);
for i = 1:n
    if i < 5
        h_trajectories(i) = plot(NaN, NaN, '-k', 'LineWidth', 1.5); % Group 1-4 black lines
    else
        h_trajectories(i) = plot(NaN, NaN, '-b', 'LineWidth', 1.5); % Group 5-9 blue lines
    end
end

% Plot static start and end points for reference (these don't animate)
for i = 1:n
    plot(x_sim(1,2*i-1), x_sim(1,2*i), 'xk', 'MarkerSize', 8, 'LineWidth', 1.5); % Start point black x
    plot(x_sim(t_end_idx,2*i-1), x_sim(t_end_idx,2*i), 'or', 'MarkerSize', 8, 'LineWidth', 1.5); % End point red o
    text(x_sim(1,2*i-1), x_sim(1,2*i), num2str(i), "Color",'k',"FontSize",12, "FontWeight", "bold"); % Agent labels
end

plot(0,0,'+m', 'MarkerSize', 10, 'LineWidth', 2); % Plot the origin as a magenta cross

axis equal; % Ensure equal scaling for x and y axes
xlabel('x-coordinate');
ylabel('y-coordinate');
title('Multi-Agent System Trajectory Animation');
grid on;
box on; % Draw a box around the plot

% Determine appropriate axis limits based on the full simulation data
% This ensures all trajectories are visible throughout the animation
min_x = min(x_sim(:, 1:2:end), [], 'all');
max_x = max(x_sim(:, 1:2:end), [], 'all');
min_y = min(x_sim(:, 2:2:end), [], 'all');
max_y = max(x_sim(:, 2:2:end), [], 'all');
% Add some padding to the limits for better visualization
padding = 0.1 * max(abs([min_x, max_x, min_y, max_y]));
xlim([min_x - padding, max_x + padding]);
ylim([min_y - padding, max_y + padding]);

% Add a legend
%legend({'Agent 1-4 Trajectory', 'Agent 5-9 Trajectory', 'Start Point (t=0)', 'End Point (t=40)', 'Origin'}, 'Location', 'best');


% 2. Prepare Video Writer Object
videoFileName = 'multi_agent_trajectory_animation.mp4'; % Output video file name
videoWriter = VideoWriter(videoFileName, 'MPEG-4'); % Create a VideoWriter object using MPEG-4 format
videoWriter.FrameRate = 30; % Set video frame rate to 30 frames per second
open(videoWriter); % Open the video file for writing

% 3. Animation Loop
disp('Generating animation frames. This may take a moment...');
for k = 1:length(t_sim)
    % Update each agent's trajectory for the current time step (k)
    % This makes the trajectories "grow" over time
    for i = 1:n
        set(h_trajectories(i), 'XData', x_sim(1:k, 2*i-1), 'YData', x_sim(1:k, 2*i));
    end

    drawnow limitrate; % Force MATLAB to update the figure window, using limitrate for efficiency

    % Capture the current frame of the figure
    frame = getframe(gcf); % gcf gets the handle to the current figure

    % Write the captured frame to the video file
    writeVideo(videoWriter, frame);
end

% 4. Finalize Video Export
close(videoWriter); % Close the video file to save it

disp(['Animation successfully saved to ', videoFileName]);

%% Dynamics Function (remains unchanged)
% This function defines the differential equation for the system's dynamics
function dpdt = control_law(t, p)
    global L % Access the global Laplacian matrix L
    dpdt = -L * p; % The control law based on the Laplacian
end

